{"ts":1351718282650,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import csv\nimport itertools\nfrom utils import *\nimport numpy as np\n\n\n'''\nCreates a fund with the given symbols and weights\nReturns: array with the daily investment for the fund\n'''\ndef fund(symbols, weights):\n    ans = 0\n    i = 0\n    for symbol in symbols:\n        cumu = cumulative_return(get_close(symbol))\n        investment = np.multiply(cumu, weights[i])\n        ans = np.add(ans, investment)\n        i = i + 1\n\n    return ans\n\n'''\nCombinates the given symbols and find the one with the highest sharpe ratio\nReturn: Winner [symbols, weights, sharpe_ratio]\n'''\ndef combine4(symbols, debugPercent=False, debugPercentValue=0.1, debugWinners=False):\n    # Create a matrix, on each row there is the info of one equity\n    data = np.array(get_close(symbols[0]))\n    for symbol in symbols:\n        if symbol != symbols[0]:\n            n = np.array(get_close(symbol))\n            data = np.vstack((data, n))\n\n    # Get the combinations of the stocks, order doesnt matter\n    combinations = list(itertools.combinations(symbols, 4))\n\n    # Get the permutation of the weights, order is important\n    weights = []\n    #weights = weights + list(set(itertools.permutations([1, 0, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.9, 0.1, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.8, 0.2, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.8, 0.1, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.8, 0.1, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.7, 0.3, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.7, 0.2, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.7, 0.1, 0.1, 0.1])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.4, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.3, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.6, 0.3, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.2, 0.2, 0])))\n    weights = weights + list(set(itertools.permutations([0.6, 0.2, 0.1, 0.1])))\n    #weights = weights + list(set(itertools.permutations([0.5, 0.4, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.4, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.5, 0.3, 0.2, 0])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.3, 0.1, 0.1])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.2, 0.2, 0.1])))\n    weights = weights + list(set(itertools.permutations([0.25, 0.25, 0.25, 0.25])))\n    weights = weights + list(set(itertools.permutations([0.3, 0.3, 0.2, 0.2])))\n    num_iterations = len(combinations) * len(weights)\n    print \"# Iterations: %s\" % num_iterations\n\n    # Loop\n    winner = []\n    winner_s = 0\n    it = 0\n    percent_complete = num_iterations * debugPercentValue # To see how the process is going\n    if debugPercent == True:\n        print \"Starting...\"\n    for combination in combinations:\n        # Get the rows for each symbol of the combination to filter the matrix\n        rows = []\n        for item in combination:\n            rows = rows + [symbols.index(item)]\n\n        for weight in weights:\n            # Print each 10% to see how is going\n            if debugPercent == True:\n                it = it + 1\n                if it > percent_complete:\n                    print \"%s percent complete\" % (100 * percent_complete / num_iterations)\n                    percent_complete = percent_complete + (num_iterations * debugPercentValue)\n\n\n            # Create a fund with the selected equities / rows\n            fund = 0\n            i = 0\n            for row in rows:\n                cumu = cumulative_return(data[row])\n                investment = np.multiply(cumu, weight[i])\n                fund = np.add(fund, investment)\n                i = i + 1\n\n            # Calculate the sharpe ratio and see if is higher that the previous\n            s_new = sharpe_ratio(fund)\n            \n            if s_new > winner_s:\n                winner = combination\n                winner_weight = weight\n                winner_s = s_new\n                if debugWinners == True:\n                    print \"%s w/ %s = %s - NEW WINNER\" % (str(winner), str(winner_weight), str(winner_s))\n            else:\n                pass\n                #print \"%s w/ %s = %s\" % (str(combination), str(weight), str(s_new))\n\n    if debugPercent == True:\n        print \"100 percent complete\"\n    return [winner, winner_weight, winner_s]\n\n'''\nCreates a fund_report.csv file with the information of a fund created by the symbols and weights\n'''\ndef fund_report(symbols, weights):\n    ammount = 1000000\n    # Get the close values of each equity\n    close = np.array(get_close(symbols[0]))\n    for symbol in symbols:\n        if symbol != symbols[0]:\n            n = np.array(get_close(symbol))\n            close = np.vstack((close, n))\n\n    # Get the cumu_ret of each equity\n    cumu_ret = np.array(cumulative_return(close[0]))\n    for i in range(len(symbols)):\n        if i != 0:\n            n = np.array(cumulative_return(close[i]))\n            cumu_ret = np.vstack((cumu_ret, n))\n\n    # Get the inv of each equity\n    inv = np.array(cumulative_return(close[0]))\n    inv = np.multiply(inv, ammount * weights[0])\n\n    for i in range(len(symbols)):\n        if i != 0:\n            n = np.array(cumulative_return(close[i]))\n            n = np.multiply(n, ammount * weights[i])\n            inv = np.vstack((inv, n))\n\n    # Get the values for the fun\n    fund_inv = fund(symbols, weights)\n    fund_inv = np.multiply(fund_inv, ammount)\n    fund_cumu = cumulative_return(fund_inv)\n    fund_daily = daily_return(fund_inv)\n\n    # --------------------------------------\n    # Write the file\n    c = csv.writer(open(\"fund_report.csv\", \"wb\"))\n\n    # Create the header\n    row = []\n    for symbol in symbols:\n        row.append(symbol)\n        row.append(symbol + \" cumu_ret\")\n        row.append(symbol + \" investment\")\n\n    row.append(\"Fund Invest\")\n    row.append(\"Fund cumu_ret\")\n    row.append(\"Fund daily_ret\")\n    c.writerow(row)\n\n    for i in range(len(close[0])):\n        row = []\n        # Add the values of each equity\n        for j in range(len(symbols)):\n            row.append(close[j][i])\n            row.append(cumu_ret[j][i])\n            row.append(inv[j][i])\n        # Add the values of the fund\n        row.append(fund_inv[i])\n        row.append(fund_cumu[i])\n        row.append(fund_daily[i])\n        # Write the row\n        c.writerow(row)\n\n    # Write the summary\n    c.writerow('')\n\n    for i in range(len(symbols)):\n        c.writerow([symbols[i] + \" weight: \", weights[i]])\n\n    c.writerow('')\n\n    c.writerow(['Annual return', anual_return(fund_inv)])\n    c.writerow(['AVG Daily return', avg_daily_return(fund_inv)])\n    c.writerow(['STD Daily return', std_daily_return(fund_inv)])\n    c.writerow(['Sharpe ratio', sharpe_ratio(fund_inv)])\n\n\nif __name__ == '__main__':\n    symbols = ['CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG']\n    symbols = ['CNC', 'ROST', 'OKE', 'BIIB'] # Best from previous line\n    symbols = ['CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG', \"AAPL\", \"GLD\"]\n    symbols = read_symbols(\"symbols.txt\")\n    #print combine4(symbols)\n    #symbols = ['ROST', 'OKE', 'BIIB', 'GLD'] # Best from previous symbols\n    print combine4(symbols, debugPercent=True, debugPercentValue=0.2)\n    #fund_report(symbols, [0.3, 0.3, 0.2, 0.2])\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":7514}]],"length":7514}
{"contributors":[],"silentsave":false,"ts":1351718702890,"patch":[[{"diffs":[[0," \"GLD\"]\n    "],[1,"#"],[0,"symbols = re"]],"start1":7240,"start2":7240,"length1":24,"length2":25},{"diffs":[[0,"    "],[-1,"#print combine4(symbols)\n    #"],[0,"symb"]],"start1":7291,"start2":7291,"length1":38,"length2":8}]],"length":7485,"saved":false}
{"ts":1351718711744,"patch":[[{"diffs":[[0,"Value=0."],[-1,"2"],[1,"1, debugWinners=True"],[0,")\n    #f"]],"start1":7424,"start2":7424,"length1":17,"length2":36}]],"length":7504,"saved":false}
{"ts":1351718909842,"patch":[[{"diffs":[[0,".2, 0.2])\n\n\n"],[1,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],"start1":7492,"start2":7492,"length1":12,"length2":27}]],"length":7519,"saved":false}
{"ts":1351719186595,"patch":[[{"diffs":[[0,"ain__':\n"],[1,"    #symbols = read_symbols(\"symbols.txt\")\n"],[0,"    symb"]],"start1":6994,"start2":6994,"length1":16,"length2":59},{"diffs":[[0,"D\"]\n"],[-1,"    #symbols = read_symbols(\"symbols.txt\")\n"],[0,"    "]],"start1":7287,"start2":7287,"length1":51,"length2":8},{"diffs":[[0,"symbols\n"],[1,"    symbols = ['HDGE', 'AGOL', 'GGGG' ,'SDIV', 'FWDB', 'NKY'] # Best EFT from a site\n"],[0,"    prin"]],"start1":7357,"start2":7357,"length1":16,"length2":101}]],"length":7604,"saved":false}
{"ts":1351719360671,"patch":[[{"diffs":[[0," = ["],[-1,"'HDGE', "],[0,"'AGO"]],"start1":7376,"start2":7376,"length1":16,"length2":8}]],"length":7596,"saved":false}
{"ts":1351719376517,"patch":[[{"diffs":[[0,"bols = ["],[1,"'HDGE', "],[0,"'AGOL', "]],"start1":7372,"start2":7372,"length1":16,"length2":24}]],"length":7604,"saved":false}
{"ts":1351719423714,"patch":[[{"diffs":[[0,"each equity\n"],[1,"    try:\n    "],[0,"    close = "]],"start1":4755,"start2":4755,"length1":24,"length2":37},{"diffs":[[0,"ymbols[0]))\n    "],[1," "],[1,"   "],[0,"for symbol in sy"]],"start1":4812,"start2":4812,"length1":32,"length2":36},{"diffs":[[0,"bol in symbols:\n"],[1,"    "],[0,"        if symbo"]],"start1":4839,"start2":4839,"length1":32,"length2":36},{"diffs":[[0,"0]:\n            "],[1,"    "],[0,"n = np.array(get"]],"start1":4888,"start2":4888,"length1":32,"length2":36},{"diffs":[[0,"l))\n            "],[1,"   "],[1," "],[0,"close = np.vstac"]],"start1":4936,"start2":4936,"length1":32,"length2":36},{"diffs":[[0,"((close, n))"],[1,"\n    except ValueError:\n        raise \"Diferent number of rows on a file\"\n        "],[0,"\n\n    # Get "]],"start1":4973,"start2":4973,"length1":24,"length2":106}]],"length":7715,"saved":false}
{"ts":1351719503999,"patch":[[{"diffs":[[0,"eError:\n"],[1,"        for symbol in symbols:\n            if symbol != symbols[0]:\n                n = np.array(get_close(symbol)) \n                print \"%s #lines = %s\" % (symbol, str(len(n)))\n"],[0,"        "]],"start1":5001,"start2":5001,"length1":16,"length2":196},{"diffs":[[0," a file\""],[-1,"\n        "],[0,"\n\n    # "]],"start1":5230,"start2":5230,"length1":25,"length2":16}]],"length":7886,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351727218086,"patch":[[{"diffs":[[0,"ity\n"],[-1,"    try:\n    "],[0,"    "]],"start1":4763,"start2":4763,"length1":21,"length2":8},{"diffs":[[0,"close = "],[1,"list("],[0,"np.array"]],"start1":4771,"start2":4771,"length1":16,"length2":21},{"diffs":[[0,"ols[0]))"],[1,")"],[0,"\n"],[-1,"    "],[0,"    for "]],"start1":4807,"start2":4807,"length1":21,"length2":18},{"diffs":[[0,"bol in symbols:\n"],[-1,"    "],[0,"        if symbo"]],"start1":4828,"start2":4828,"length1":36,"length2":32},{"diffs":[[0,"0]:\n            "],[-1,"  "],[-1,"  "],[0,"n = np.array(get"]],"start1":4873,"start2":4873,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"    "],[0,"close = "],[-1,"np.vstack((close, n))\n    except ValueError:\n        for symbol in symbols:\n            if symbol != symbols[0]:\n                n = np.array(get_close(symbol)) \n                print \"%s #lines = %s\" % (symbol, str(l"],[1,"close.app"],[0,"en"],[1,"d"],[0,"(n)"],[-1,"))\n        raise \"Diferent number of rows on a file\""],[0,"\n\n  "]],"start1":4929,"start2":4929,"length1":294,"length2":31},{"diffs":[[0,"le\n    c"],[-1,""],[0,""],[1,"sv_file"],[0," = csv.w"]],"start1":5800,"start2":5800,"length1":16,"length2":23},{"diffs":[[0,"_ret\")\n    c"],[-1,""],[0,""],[1,"sv_file"],[0,".writerow(ro"]],"start1":6125,"start2":6125,"length1":24,"length2":31},{"diffs":[[0,"he row\n        c"],[1,"sv_file"],[0,".writerow(row)\n\n"]],"start1":6552,"start2":6552,"length1":32,"length2":39},{"diffs":[[0,"ummary\n    c"],[1,"sv_file"],[0,".writerow(''"]],"start1":6608,"start2":6608,"length1":24,"length2":31},{"diffs":[[0,"):\n        c"],[1,"sv_file"],[0,".writerow([s"]],"start1":6673,"start2":6673,"length1":24,"length2":31},{"diffs":[[0,"ghts[i]])\n\n    c"],[1,"sv_file"],[0,".writerow('')\n\n "]],"start1":6732,"start2":6732,"length1":32,"length2":39},{"diffs":[[0,"w('')\n\n    c"],[1,"sv_file"],[0,".writerow(['"]],"start1":6763,"start2":6763,"length1":24,"length2":31},{"diffs":[[0,"und_inv)])\n    c"],[1,"sv_file"],[0,".writerow(['AVG "]],"start1":6824,"start2":6824,"length1":32,"length2":39},{"diffs":[[0,"und_inv)])\n    c"],[1,"sv_file"],[0,".writerow(['STD "]],"start1":6896,"start2":6896,"length1":32,"length2":39},{"diffs":[[0,"])\n    c"],[1,"sv_file"],[0,".writero"]],"start1":6976,"start2":6976,"length1":16,"length2":23},{"diffs":[[0,"_':\n    "],[-1,"#"],[0,"symbols "]],"start1":7068,"start2":7068,"length1":17,"length2":16},{"diffs":[[0,"revious "],[-1,"symbols"],[1,"line"],[0,"\n    sym"]],"start1":7418,"start2":7418,"length1":23,"length2":20},{"diffs":[[0,"', 'NKY'"],[1,", 'ROST', 'OKE', 'BIIB', 'GLD'"],[0,"] # Best"]],"start1":7483,"start2":7483,"length1":16,"length2":46},{"diffs":[[0,"gPercentValue=0."],[-1,"1"],[1,"2"],[0,", debugWinners=T"]],"start1":7597,"start2":7597,"length1":33,"length2":33},{"diffs":[[0," 0.2])\n\n\n\n\n\n\n\n\n\n"],[-1,"\n\n\n\n\n\n\n\n"]],"start1":7676,"start2":7676,"length1":24,"length2":16}]],"length":7692,"saved":false}
{"ts":1351727239871,"patch":[[{"diffs":[[0,"Value=0."],[-1,"2"],[1,"1"],[0,", debugW"]],"start1":7605,"start2":7605,"length1":17,"length2":17}]],"length":7692,"saved":false}
{"ts":1351727283610,"patch":[[{"diffs":[[0," a site\n"],[1,"    symbols = ['AGOL', 'GGGG', 'SDIV', 'NKY'] # Best from previous line\n    symbols = ['AGOL', 'GGGG', 'SDIV', 'NKY'] # Best from two previous lines\n"],[0,"    prin"]],"start1":7538,"start2":7538,"length1":16,"length2":165},{"diffs":[[0," 0.2])\n\n\n\n\n\n\n\n\n\n"],[1,"\n"]],"start1":7825,"start2":7825,"length1":16,"length2":17}]],"length":7842,"saved":false}
{"ts":1351727291374,"patch":[[{"diffs":[[0,"', 'SDIV', 'NKY'"],[1,", 'ROST', 'OKE', 'BIIB', 'GLD'"],[0,"] # Best from tw"]],"start1":7646,"start2":7646,"length1":32,"length2":62}]],"length":7872,"saved":false}
{"ts":1351727308740,"patch":[[{"diffs":[[0,"ain__':\n    "],[1,"#"],[0,"symbols = re"]],"start1":7064,"start2":7064,"length1":24,"length2":25}]],"length":7873,"saved":false}

{"ts":1351728704847,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import csv\nimport itertools\nfrom utils import *\nimport numpy as np\n\n\n'''\nCreates a fund with the given symbols and weights\nReturns: array with the daily investment for the fund\n'''\ndef fund(symbols, weights):\n    ans = 0\n    i = 0\n    for symbol in symbols:\n        cumu = cumulative_return(get_close(symbol))\n        investment = np.multiply(cumu, weights[i])\n        ans = np.add(ans, investment)\n        i = i + 1\n\n    return ans\n\n'''\nCombinates the given symbols and find the one with the highest sharpe ratio\nReturn: Winner [symbols, weights, sharpe_ratio]\n'''\ndef combine4(symbols, debugPercent=False, debugPercentValue=0.1, debugWinners=False):\n    # Create a matrix, on each row there is the info of one equity\n    data = np.array(get_close(symbols[0]))\n    for symbol in symbols:\n        if symbol != symbols[0]:\n            n = np.array(get_close(symbol))\n            data = np.vstack((data, n))\n\n    # Get the combinations of the stocks, order doesnt matter\n    combinations = list(itertools.combinations(symbols, 4))\n\n    # Get the permutation of the weights, order is important\n    weights = []\n    #weights = weights + list(set(itertools.permutations([1, 0, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.9, 0.1, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.8, 0.2, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.8, 0.1, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.8, 0.1, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.7, 0.3, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.7, 0.2, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.7, 0.1, 0.1, 0.1])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.4, 0, 0])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.3, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.6, 0.3, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.6, 0.2, 0.2, 0])))\n    weights = weights + list(set(itertools.permutations([0.6, 0.2, 0.1, 0.1])))\n    #weights = weights + list(set(itertools.permutations([0.5, 0.4, 0.1, 0])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.4, 0.05, 0.05])))\n    #weights = weights + list(set(itertools.permutations([0.5, 0.3, 0.2, 0])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.3, 0.1, 0.1])))\n    weights = weights + list(set(itertools.permutations([0.5, 0.2, 0.2, 0.1])))\n    weights = weights + list(set(itertools.permutations([0.25, 0.25, 0.25, 0.25])))\n    weights = weights + list(set(itertools.permutations([0.3, 0.3, 0.2, 0.2])))\n    num_iterations = len(combinations) * len(weights)\n    print \"# Iterations: %s\" % num_iterations\n\n    # Loop\n    winner = []\n    winner_s = 0\n    it = 0\n    percent_complete = num_iterations * debugPercentValue # To see how the process is going\n    if debugPercent == True:\n        print \"Starting...\"\n    for combination in combinations:\n        # Get the rows for each symbol of the combination to filter the matrix\n        rows = []\n        for item in combination:\n            rows = rows + [symbols.index(item)]\n\n        for weight in weights:\n            # Print each 10% to see how is going\n            if debugPercent == True:\n                it = it + 1\n                if it > percent_complete:\n                    print \"%s percent complete\" % (100 * percent_complete / num_iterations)\n                    percent_complete = percent_complete + (num_iterations * debugPercentValue)\n\n\n            # Create a fund with the selected equities / rows\n            fund = 0\n            i = 0\n            for row in rows:\n                cumu = cumulative_return(data[row])\n                investment = np.multiply(cumu, weight[i])\n                fund = np.add(fund, investment)\n                i = i + 1\n\n            # Calculate the sharpe ratio and see if is higher that the previous\n            s_new = sharpe_ratio(fund)\n            \n            if s_new > winner_s:\n                winner = combination\n                winner_weight = weight\n                winner_s = s_new\n                if debugWinners == True:\n                    print \"%s w/ %s = %s - NEW WINNER\" % (str(winner), str(winner_weight), str(winner_s))\n            else:\n                pass\n                #print \"%s w/ %s = %s\" % (str(combination), str(weight), str(s_new))\n\n    if debugPercent == True:\n        print \"100 percent complete\"\n    return [winner, winner_weight, winner_s]\n\n'''\nCreates a fund_report.csv file with the information of a fund created by the symbols and weights\n'''\ndef fund_report(symbols, weights):\n    ammount = 1000000\n    # Get the close values of each equity\n    close = list(np.array(get_close(symbols[0])))\n    for symbol in symbols:\n        if symbol != symbols[0]:\n            n = np.array(get_close(symbol))\n            close = close.append(n)\n\n    # Get the cumu_ret of each equity\n    cumu_ret = np.array(cumulative_return(close[0]))\n    for i in range(len(symbols)):\n        if i != 0:\n            n = np.array(cumulative_return(close[i]))\n            cumu_ret = np.vstack((cumu_ret, n))\n\n    # Get the inv of each equity\n    inv = np.array(cumulative_return(close[0]))\n    inv = np.multiply(inv, ammount * weights[0])\n\n    for i in range(len(symbols)):\n        if i != 0:\n            n = np.array(cumulative_return(close[i]))\n            n = np.multiply(n, ammount * weights[i])\n            inv = np.vstack((inv, n))\n\n    # Get the values for the fun\n    fund_inv = fund(symbols, weights)\n    fund_inv = np.multiply(fund_inv, ammount)\n    fund_cumu = cumulative_return(fund_inv)\n    fund_daily = daily_return(fund_inv)\n\n    # --------------------------------------\n    # Write the file\n    csv_file = csv.writer(open(\"fund_report.csv\", \"wb\"))\n\n    # Create the header\n    row = []\n    for symbol in symbols:\n        row.append(symbol)\n        row.append(symbol + \" cumu_ret\")\n        row.append(symbol + \" investment\")\n\n    row.append(\"Fund Invest\")\n    row.append(\"Fund cumu_ret\")\n    row.append(\"Fund daily_ret\")\n    csv_file.writerow(row)\n\n    for i in range(len(close[0])):\n        row = []\n        # Add the values of each equity\n        for j in range(len(symbols)):\n            row.append(close[j][i])\n            row.append(cumu_ret[j][i])\n            row.append(inv[j][i])\n        # Add the values of the fund\n        row.append(fund_inv[i])\n        row.append(fund_cumu[i])\n        row.append(fund_daily[i])\n        # Write the row\n        csv_file.writerow(row)\n\n    # Write the summary\n    csv_file.writerow('')\n\n    for i in range(len(symbols)):\n        csv_file.writerow([symbols[i] + \" weight: \", weights[i]])\n\n    csv_file.writerow('')\n\n    csv_file.writerow(['Annual return', anual_return(fund_inv)])\n    csv_file.writerow(['AVG Daily return', avg_daily_return(fund_inv)])\n    csv_file.writerow(['STD Daily return', std_daily_return(fund_inv)])\n    csv_file.writerow(['Sharpe ratio', sharpe_ratio(fund_inv)])\n\n\nif __name__ == '__main__':\n    #symbols = read_symbols(\"symbols.txt\")\n    symbols = ['CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG']\n    symbols = ['CNC', 'ROST', 'OKE', 'BIIB'] # Best from previous line\n    symbols = ['CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG', \"AAPL\", \"GLD\"]\n    symbols = ['ROST', 'OKE', 'BIIB', 'GLD'] # Best from previous line\n    symbols = ['HDGE', 'AGOL', 'GGGG' ,'SDIV', 'FWDB', 'NKY', 'ROST', 'OKE', 'BIIB', 'GLD'] # Best EFT from a site\n    symbols = ['AGOL', 'GGGG', 'SDIV', 'NKY'] # Best from previous line\n    symbols = ['AGOL', 'GGGG', 'SDIV', 'NKY', 'ROST', 'OKE', 'BIIB', 'GLD'] # Best from two previous lines\n    print combine4(symbols, debugPercent=True, debugPercentValue=0.1, debugWinners=True)\n    #fund_report(symbols, [0.3, 0.3, 0.2, 0.2])\n\n\n\n\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":7873}]],"length":7873}
{"contributors":[],"silentsave":false,"ts":1351728712667,"patch":[[{"diffs":[[0,"ine\n"],[-1,"    symbols = ['CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG', \"AAPL\", \"GLD\"]\n    symbols = ['ROST', 'OKE', 'BIIB', 'GLD'] # Best from previous line\n"],[0,"    "]],"start1":7262,"start2":7262,"length1":174,"length2":8},{"diffs":[[0,"= ['"],[-1,"AGOL', 'GGGG', 'SDIV', 'NKY', "],[1,"CNC', 'TRGP', 'ROST', 'OKE', 'HUM', 'VFC', 'BIIB', 'MA', 'WCG', \"AAPL\", \"GLD\"]\n    symbols = ["],[0,"'ROS"]],"start1":7465,"start2":7465,"length1":38,"length2":102},{"diffs":[[0,"rom "],[-1,"two "],[0,"prev"]],"start1":7601,"start2":7601,"length1":12,"length2":8},{"diffs":[[0,"ous line"],[-1,"s"],[0,"\n    pri"]],"start1":7610,"start2":7610,"length1":17,"length2":16}]],"length":7766,"saved":false}
{"ts":1351728854715,"patch":[[{"diffs":[[0,"NKY'"],[-1,", 'ROST', 'OKE', 'BIIB', 'GLD'"],[0,"] # "]],"start1":7322,"start2":7322,"length1":38,"length2":8}]],"length":7736,"saved":false}
{"ts":1351731358604,"patch":[[{"diffs":[[0,"evious line\n"],[1,"    symbols = ['BIIB', 'PFE', 'BMY', 'D', 'PM', 'GLD']\n"],[0,"    print co"]],"start1":7577,"start2":7577,"length1":24,"length2":79}]],"length":7791,"saved":false}
{"ts":1351731388779,"patch":[[{"diffs":[[0,", 'GLD']"],[1," # Best for bloomberg"],[0,"\n    pri"]],"start1":7635,"start2":7635,"length1":16,"length2":37}]],"length":7812,"saved":false}
{"ts":1351731589007,"patch":[[{"diffs":[[0," # Best "],[1,"stocks for bloomberg\n    symbols = ['BBH', 'IHE', 'PJP', 'XLU', 'VPU', 'IDU', 'FXG', 'PPH', 'XLP', 'VDC'] # Best ETF stocks "],[0,"for bloo"]],"start1":7643,"start2":7643,"length1":16,"length2":140}]],"length":7936,"saved":false}
{"ts":1351731616212,"patch":[[{"diffs":[[0,"r bloomberg\n"],[1,"    # [('BIIB', 'BMY', 'PM', 'GLD'), (0.10000000000000001, 0.5, 0.20000000000000001, 0.20000000000000001), 2.1376875820661292] \n"],[0,"    symbols "]],"start1":7660,"start2":7660,"length1":24,"length2":152}]],"length":8064,"saved":false}
